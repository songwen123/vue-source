在深入渲染函数之前，了解一些浏览器的工作原理是很重要的。以下面这段 HTML 为例：
<div>
  <h1>My title</h1>
  Some text content
  <!-- TODO: Add tagline -->
</div>
当浏览器读到这些代码时，它会建立一个“DOM 节点”树来保持追踪所有内容，如同你会画一张家谱树来追踪家庭成员的发展一样。
上述 HTML 对应的 DOM 节点树

每个元素都是一个节点。每段文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。
高效地更新所有这些节点会是比较困难的，不过所幸你不必手动完成这个工作。你只需要告诉 Vue 你希望页面上的 HTML 是什么，这可以是在一个模板里：
<h1>{{ blogTitle }}</h1>
或者一个渲染函数里：
render: function (createElement) {
  return createElement('h1', this.blogTitle)
}
在这两种情况下，Vue 都会自动保持页面的更新，即便 blogTitle 发生了改变。

